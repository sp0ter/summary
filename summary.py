import discord
from discord.ext import commands, tasks
import os
from dotenv import load_dotenv, dotenv_values
import datetime
import pytz
import re
import logging
from logging.handlers import RotatingFileHandler
import asyncio
import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logger = logging.getLogger('discord_summary_bot')
logger.setLevel(logging.INFO)
handler = RotatingFileHandler('summary.log', maxBytes=5*1024*1024, backupCount=2)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

scheduler = AsyncIOScheduler(timezone='Europe/Kyiv')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path='.env')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('DISCORD_SUMMARYBOT_TOKEN')
GUILD_ID = os.getenv('GUILD_ID')
SUMMARY_ID = os.getenv('SUMMARY_ID')
SUMMARY_ROLE_ID = os.getenv('SUMMARY_ROLE_ID')

if not all([TOKEN, GUILD_ID, SUMMARY_ID, SUMMARY_ROLE_ID]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: DISCORD_BOT_TOKEN, GUILD_ID, SUMMARY_ID, SUMMARY_ROLE_ID")
    exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
try:
    GUILD_ID = int(GUILD_ID)
    SUMMARY_ID = int(SUMMARY_ID)
    SUMMARY_ROLE_ID = int(SUMMARY_ROLE_ID)
except ValueError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞: {e}")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
SUMMARY_CHANNEL_IDS = []
INCLUDE_ROLE_MENTIONS = os.getenv('INCLUDE_ROLE_MENTIONS', 'True').lower() == 'true'
MAX_MESSAGES = int(os.getenv('MAX_MESSAGES', '500'))
COLLECTION_TIMEOUT = int(os.getenv('COLLECTION_TIMEOUT', '300'))

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ ID –∫–∞–Ω–∞–ª–æ–≤
def parse_channel_ids(raw_ids):
    if not raw_ids:
        return []
    cleaned_ids = raw_ids.strip().split(',')
    ids = []
    for part in cleaned_ids:
        part = part.strip()
        if not part:
            continue
        match = re.match(r'^(\d+)', part)
        if match:
            ids.append(int(match.group(1)))
    return ids

def load_channel_ids_from_env():
    env_vars = dotenv_values(dotenv_path='.env')
    raw_ids = env_vars.get("DISCORD_CHANNELS", "")
    logger.info(f"Raw DISCORD_CHANNELS: {raw_ids}")
    return parse_channel_ids(raw_ids)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
SUMMARY_CHANNEL_IDS = load_channel_ids_from_env()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

async def update_progress(message, current, total, extra_info=""):
    progress = int((current / total) * 100) if total > 0 else 0
    progress_text = f"üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–π–¥–∂–µ—Å—Ç... {progress}% ({current}/{total} –∫–∞–Ω–∞–ª–æ–≤)"
    if extra_info:
        progress_text += f"\n{extra_info}"
    try:
        await message.edit(content=progress_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def get_yesterday_kyiv():
    kyiv_tz = pytz.timezone('Europe/Kyiv')
    now = datetime.datetime.now(kyiv_tz)
    yesterday = now - datetime.timedelta(days=1)
    start = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
    end = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
    return start, end

async def collect_messages_from_yesterday(channel_ids=None, progress_message=None):
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Å ID {GUILD_ID}")
        return []

    start, end = get_yesterday_kyiv()
    summary_mention = f"<@&{SUMMARY_ROLE_ID}>"
    messages = []
    channels_to_scan = []

    logger.info(f"–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start.strftime('%d.%m.%Y %H:%M')} –ø–æ {end.strftime('%d.%m.%Y %H:%M')} (–ö–∏–µ–≤)")

    specific_channels = []
    if channel_ids:
        for channel_id in channel_ids:
            channel = guild.get_channel(channel_id)
            if channel:
                specific_channels.append(channel)
                channels_to_scan.append((channel, False))

    if INCLUDE_ROLE_MENTIONS:
        for channel in guild.text_channels:
            if channel not in specific_channels:
                channels_to_scan.append((channel, True))

    total_channels = len(channels_to_scan)
    processed_channels = 0
    messages_count = 0

    for channel, role_only in channels_to_scan:
        if progress_message:
            await update_progress(
                progress_message,
                processed_channels,
                total_channels,
                f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}"
                #f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: #{channel.name} | –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}"
            )

        try:
            channel_messages = []
            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ #{channel.name} ({'—Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ —Ä–æ–ª–∏' if role_only else '–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'})")

            async for msg in channel.history(after=start, before=end, oldest_first=True, limit=MAX_MESSAGES):
                if not msg.author.bot:
                    if not role_only or (role_only and summary_mention in msg.content):
                        channel_messages.append(msg)
                        messages_count += 1

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(channel_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ #{channel.name}")
            messages.extend(channel_messages)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ #{channel.name}: {e}")

        processed_channels += 1

    if progress_message:
        await update_progress(progress_message, total_channels, total_channels, f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {processed_channels} –∫–∞–Ω–∞–ª–æ–≤")
    return messages

async def format_and_send_digest(channel, collected_messages):
    kyiv_tz = pytz.timezone('Europe/Kyiv')
    yesterday = datetime.datetime.now(kyiv_tz) - datetime.timedelta(days=1)
    summary_date = yesterday.strftime('%d.%m.%Y')

    messages_by_channel = {}
    channel_order_map = {channel_id: idx for idx, channel_id in enumerate(SUMMARY_CHANNEL_IDS)}

    for msg in collected_messages:
        channel_name = msg.channel.name
        channel_id = msg.channel.id
        if channel_name not in messages_by_channel:
            messages_by_channel[channel_name] = {"messages": [], "channel_id": channel_id}
        messages_by_channel[channel_name]["messages"].append(msg)

    await send_text_digest(channel, messages_by_channel, summary_date, channel_order_map)

async def send_text_digest(channel, messages_by_channel, summary_date, channel_order_map):
    text_summary = f"üìö **–í—ã–∂–∏–º–∫–∞ 2TOP SQUAD –∑–∞ {summary_date}**\n"
    #—Ä–æ–ª—å squadmember
    role_mention = f"<@&829341057190723595>"

    channels_in_list = []
    channels_not_in_list = []

    for channel_name, data in messages_by_channel.items():
        channel_id = data["channel_id"]
        if channel_id in channel_order_map:
            channels_in_list.append((channel_name, data["messages"], channel_order_map[channel_id]))
        else:
            channels_not_in_list.append((channel_name, data["messages"]))

    channels_in_list.sort(key=lambda x: x[2])
    channels_not_in_list.sort(key=lambda x: len(x[1]), reverse=True)

    sorted_channels = [(name, msgs) for name, msgs, _ in channels_in_list] + channels_not_in_list

    for channel_name, msgs in sorted_channels:
        channel_name_cleaned = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø\s-]', '', channel_name)
        channel_text = f"\n**__{channel_name_cleaned.capitalize()}__**\n"

        for msg in msgs:
            content_preview = re.sub(r'^#{1,3}\s*', '', msg.content.split('\n')[0])
            content_preview = re.sub(r'\*\*(.*?)\*\*', r'\1', content_preview)
            content_preview = content_preview[:100] or "–ü–æ—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            if len(content_preview) == 100:
                content_preview += "..."
            channel_text += f"{content_preview}\n{msg.jump_url}\n"

        if len(text_summary) + len(channel_text) > 1900:
            await channel.send(text_summary)
            #text_summary = f"üìö **–í—ã–∂–∏–º–∫–∞ 2TOP SQUAD –∑–∞ {summary_date} (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)**\n" + channel_text
            text_summary = channel_text
        else:
            text_summary += channel_text

    if text_summary:
        #—Ç–µ–≥ —Ä–æ–ª–∏ 
        text_summary += f"\n{role_mention}"
        await channel.send(text_summary)

async def send_summary(channel, channel_ids=None, progress_message=None):
    try:
        collected_messages = await asyncio.wait_for(
            collect_messages_from_yesterday(channel_ids, progress_message),
            timeout=COLLECTION_TIMEOUT
        )

        if collected_messages:
            await format_and_send_digest(channel, collected_messages)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª #{channel.name}")
        else:
            await channel.send("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.")
            logger.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")

        if progress_message:
            try:
                await progress_message.delete()
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")

    except asyncio.TimeoutError:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç ({COLLECTION_TIMEOUT}s) –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        error_msg = f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç ({COLLECTION_TIMEOUT}s). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä —Ç–µ–≥–æ–≤ —Ä–æ–ª–µ–π."
        if progress_message:
            await progress_message.edit(content=error_msg)
        else:
            await channel.send(error_msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        await channel.send(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)[:1500]}")
        if progress_message:
            try:
                await progress_message.delete()
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def run_daily_summary():
    logger.info("–ó–∞–ø—É—Å–∫ daily_summary —á–µ—Ä–µ–∑ apscheduler")
    try:
        guild = bot.get_guild(GUILD_ID)
        if not guild:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Å ID {GUILD_ID}")
            return
        channel = guild.get_channel(SUMMARY_ID)
        if not channel:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {SUMMARY_ID}")
            return
        progress_msg = await channel.send("üîÑ –°–æ–±–∏—Ä–∞—é –¥–∞–π–¥–∂–µ—Å—Ç...")
        await send_summary(channel, SUMMARY_CHANNEL_IDS or None, progress_msg)
        logger.info("–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ run_daily_summary: {e}")

@bot.command()
async def toggle_role_mentions(ctx):
    global INCLUDE_ROLE_MENTIONS
    INCLUDE_ROLE_MENTIONS = not INCLUDE_ROLE_MENTIONS
    status = "–≤–∫–ª—é—á–µ–Ω–æ" if INCLUDE_ROLE_MENTIONS else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await ctx.send(f"üîÑ –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–≥–æ–º —Ä–æ–ª–∏ {status}. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–æ–º —Ä–æ–ª–∏ {'–∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤' if INCLUDE_ROLE_MENTIONS else '—Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'}.")
    logger.info(f"–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–≥–æ–º —Ä–æ–ª–∏: {status}")

@bot.command()
async def set_max_messages(ctx, limit: int):
    global MAX_MESSAGES
    if limit < 10:
        await ctx.send("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 10 —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    MAX_MESSAGES = limit
    await ctx.send(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")

@bot.command()
async def set_timeout(ctx, seconds: int):
    global COLLECTION_TIMEOUT
    if seconds < 30:
        await ctx.send("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 30 —Å–µ–∫—É–Ω–¥")
        return
    COLLECTION_TIMEOUT = seconds
    await ctx.send(f"‚úÖ –¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∞: {seconds} —Å–µ–∫—É–Ω–¥")
    logger.info(f"–¢–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∞: {seconds} —Å–µ–∫—É–Ω–¥")

@bot.command()
async def digest(ctx):
    progress_msg = await ctx.send("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await send_summary(ctx.channel, SUMMARY_CHANNEL_IDS or None, progress_msg)

@bot.command()
async def reload_channels(ctx):
    global SUMMARY_CHANNEL_IDS
    old_channels = SUMMARY_CHANNEL_IDS.copy()
    SUMMARY_CHANNEL_IDS = load_channel_ids_from_env()

    added = [ch for ch in SUMMARY_CHANNEL_IDS if ch not in old_channels]
    removed = [ch for ch in old_channels if ch not in SUMMARY_CHANNEL_IDS]

    response = f"‚ôªÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(SUMMARY_CHANNEL_IDS)} –∫–∞–Ω–∞–ª–æ–≤"
    if added:
        response += f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(map(str, added))}"
    if removed:
        response += f"\n‚ùå –£–¥–∞–ª–µ–Ω–æ: {', '.join(map(str, removed))}"

    await ctx.send(response)
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {SUMMARY_CHANNEL_IDS}")

@bot.command()
async def digest_from(ctx, *channel_mentions: discord.TextChannel):
    if not channel_mentions:
        await ctx.send("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: `!digest_from #general #announcements`")
        return
    channel_ids = [ch.id for ch in channel_mentions]
    progress_msg = await ctx.send(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–±–æ—Ä—É –∏–∑ {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤...")
    await send_summary(ctx.channel, channel_ids, progress_msg)

@bot.event
async def on_ready():
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    logger.info(f"üìå –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–±–æ—Ä–∞: {SUMMARY_CHANNEL_IDS}")
    logger.info(f"üîî –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–≥–æ–º —Ä–æ–ª–∏: {'–í–∫–ª—é—á–µ–Ω–æ' if INCLUDE_ROLE_MENTIONS else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
    logger.info(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —Å–±–æ—Ä–∞: {COLLECTION_TIMEOUT} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {MAX_MESSAGES}")
    logger.info(f"üïí –°–∏—Å—Ç–µ–º–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {time.tzname}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ 00:01 –ø–æ –∫–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    scheduler.add_job(run_daily_summary, 'cron', hour=0, minute=1)
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ apscheduler –∑–∞–ø—É—â–µ–Ω")

@bot.command()
async def check_schedule(ctx):
    try:
        if scheduler.running:
            next_run = scheduler.get_jobs()[0].next_run_time if scheduler.get_jobs() else None
            if next_run:
                kyiv_tz = pytz.timezone('Europe/Kyiv')
                next_run_kyiv = next_run.astimezone(kyiv_tz)
                now = datetime.datetime.now(kyiv_tz)
                time_until = next_run_kyiv - now
                hours, remainder = divmod(time_until.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                await ctx.send(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n"
                    f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_kyiv.strftime('%d.%m.%Y %H:%M:%S')} (–ö–∏–µ–≤)\n"
                    f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {time_until.days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"
                )
                logger.info(f"–°—Ç–∞—Ç—É—Å apscheduler: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ {next_run_kyiv}")
            else:
                await ctx.send("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.")
                logger.warning("apscheduler –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        else:
            await ctx.send("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
            logger.warning("apscheduler –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ apscheduler: {e}")

@bot.command()
async def restart_scheduler(ctx):
    try:
        scheduler.shutdown()
        scheduler.start()
        scheduler.add_job(run_daily_summary, 'cron', hour=0, minute=1)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ 00:01
        await ctx.send("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        next_run = scheduler.get_jobs()[0].next_run_time if scheduler.get_jobs() else None
        if next_run:
            kyiv_tz = pytz.timezone('Europe/Kyiv')
            next_run_kyiv = next_run.astimezone(kyiv_tz)
            now = datetime.datetime.now(kyiv_tz)
            time_until = next_run_kyiv - now
            hours, remainder = divmod(time_until.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await ctx.send(
                f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_kyiv.strftime('%d.%m.%Y %H:%M:%S')} (–ö–∏–µ–≤)\n"
                f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {time_until.days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"
            )
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ apscheduler –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ apscheduler: {e}")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.run(TOKEN)
